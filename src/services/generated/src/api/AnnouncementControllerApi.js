/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Announcement from '../model/Announcement';
import StringResponse from '../model/StringResponse';

/**
* AnnouncementController service.
* @module api/AnnouncementControllerApi
* @version v0
*/
export default class AnnouncementControllerApi {

    /**
    * Constructs a new AnnouncementControllerApi. 
    * @alias module:api/AnnouncementControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {String} authorization 
     * @param {module:model/Announcement} announcement 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StringResponse} and HTTP response
     */
    addAnnouncementWithHttpInfo(authorization, announcement) {
      let postBody = announcement;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling addAnnouncement");
      }
      // verify the required parameter 'announcement' is set
      if (announcement === undefined || announcement === null) {
        throw new Error("Missing the required parameter 'announcement' when calling addAnnouncement");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = StringResponse;
      return this.apiClient.callApi(
        '/announcement/addAnnouncement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} authorization 
     * @param {module:model/Announcement} announcement 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StringResponse}
     */
    addAnnouncement(authorization, announcement) {
      return this.addAnnouncementWithHttpInfo(authorization, announcement)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} announcementID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StringResponse} and HTTP response
     */
    deleteAnnouncementWithHttpInfo(announcementID, authorization) {
      let postBody = null;
      // verify the required parameter 'announcementID' is set
      if (announcementID === undefined || announcementID === null) {
        throw new Error("Missing the required parameter 'announcementID' when calling deleteAnnouncement");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteAnnouncement");
      }

      let pathParams = {
      };
      let queryParams = {
        'announcementID': announcementID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = StringResponse;
      return this.apiClient.callApi(
        '/announcement/deleteAnnouncement', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} announcementID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StringResponse}
     */
    deleteAnnouncement(announcementID, authorization) {
      return this.deleteAnnouncementWithHttpInfo(announcementID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} announcementID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Announcement} and HTTP response
     */
    getAnnouncementWithHttpInfo(announcementID, authorization) {
      let postBody = null;
      // verify the required parameter 'announcementID' is set
      if (announcementID === undefined || announcementID === null) {
        throw new Error("Missing the required parameter 'announcementID' when calling getAnnouncement");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAnnouncement");
      }

      let pathParams = {
      };
      let queryParams = {
        'announcementID': announcementID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Announcement;
      return this.apiClient.callApi(
        '/announcement/getAnnouncement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} announcementID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Announcement}
     */
    getAnnouncement(announcementID, authorization) {
      return this.getAnnouncementWithHttpInfo(announcementID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} userID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Announcement>} and HTTP response
     */
    getAnnouncementsWithHttpInfo(userID, authorization) {
      let postBody = null;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling getAnnouncements");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAnnouncements");
      }

      let pathParams = {
      };
      let queryParams = {
        'userID': userID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Announcement];
      return this.apiClient.callApi(
        '/announcement/getAnnouncements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} userID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Announcement>}
     */
    getAnnouncements(userID, authorization) {
      return this.getAnnouncementsWithHttpInfo(userID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
