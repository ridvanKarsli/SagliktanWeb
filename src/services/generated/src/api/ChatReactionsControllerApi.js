/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ReactionPerson from '../model/ReactionPerson';
import StringResponse from '../model/StringResponse';

/**
* ChatReactionsController service.
* @module api/ChatReactionsControllerApi
* @version v0
*/
export default class ChatReactionsControllerApi {

    /**
    * Constructs a new ChatReactionsControllerApi. 
    * @alias module:api/ChatReactionsControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {Number} chatReactionsID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StringResponse} and HTTP response
     */
    cancelDislikeChatWithHttpInfo(chatReactionsID, authorization) {
      let postBody = null;
      // verify the required parameter 'chatReactionsID' is set
      if (chatReactionsID === undefined || chatReactionsID === null) {
        throw new Error("Missing the required parameter 'chatReactionsID' when calling cancelDislikeChat");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cancelDislikeChat");
      }

      let pathParams = {
      };
      let queryParams = {
        'chatReactionsID': chatReactionsID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = StringResponse;
      return this.apiClient.callApi(
        '/ChatReactions/cancelDislikeChat', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} chatReactionsID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StringResponse}
     */
    cancelDislikeChat(chatReactionsID, authorization) {
      return this.cancelDislikeChatWithHttpInfo(chatReactionsID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} chatReactionsID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StringResponse} and HTTP response
     */
    cancelLikeChatWithHttpInfo(chatReactionsID, authorization) {
      let postBody = null;
      // verify the required parameter 'chatReactionsID' is set
      if (chatReactionsID === undefined || chatReactionsID === null) {
        throw new Error("Missing the required parameter 'chatReactionsID' when calling cancelLikeChat");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cancelLikeChat");
      }

      let pathParams = {
      };
      let queryParams = {
        'chatReactionsID': chatReactionsID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = StringResponse;
      return this.apiClient.callApi(
        '/ChatReactions/cancelLikeChat', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} chatReactionsID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StringResponse}
     */
    cancelLikeChat(chatReactionsID, authorization) {
      return this.cancelLikeChatWithHttpInfo(chatReactionsID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} dislikedeChatID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StringResponse} and HTTP response
     */
    dislikeChatWithHttpInfo(dislikedeChatID, authorization) {
      let postBody = null;
      // verify the required parameter 'dislikedeChatID' is set
      if (dislikedeChatID === undefined || dislikedeChatID === null) {
        throw new Error("Missing the required parameter 'dislikedeChatID' when calling dislikeChat");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling dislikeChat");
      }

      let pathParams = {
      };
      let queryParams = {
        'dislikedeChatID': dislikedeChatID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = StringResponse;
      return this.apiClient.callApi(
        '/ChatReactions/dislikeChat', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} dislikedeChatID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StringResponse}
     */
    dislikeChat(dislikedeChatID, authorization) {
      return this.dislikeChatWithHttpInfo(dislikedeChatID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} chatID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ReactionPerson>} and HTTP response
     */
    getDislikedChatPeopeWithHttpInfo(chatID, authorization) {
      let postBody = null;
      // verify the required parameter 'chatID' is set
      if (chatID === undefined || chatID === null) {
        throw new Error("Missing the required parameter 'chatID' when calling getDislikedChatPeope");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getDislikedChatPeope");
      }

      let pathParams = {
      };
      let queryParams = {
        'chatID': chatID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ReactionPerson];
      return this.apiClient.callApi(
        '/ChatReactions/dislikedPeople', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} chatID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ReactionPerson>}
     */
    getDislikedChatPeope(chatID, authorization) {
      return this.getDislikedChatPeopeWithHttpInfo(chatID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} chatID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ReactionPerson>} and HTTP response
     */
    getLikedChatPeopeWithHttpInfo(chatID, authorization) {
      let postBody = null;
      // verify the required parameter 'chatID' is set
      if (chatID === undefined || chatID === null) {
        throw new Error("Missing the required parameter 'chatID' when calling getLikedChatPeope");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getLikedChatPeope");
      }

      let pathParams = {
      };
      let queryParams = {
        'chatID': chatID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ReactionPerson];
      return this.apiClient.callApi(
        '/ChatReactions/likedPeople', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} chatID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ReactionPerson>}
     */
    getLikedChatPeope(chatID, authorization) {
      return this.getLikedChatPeopeWithHttpInfo(chatID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} likedchatID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StringResponse} and HTTP response
     */
    likeChatWithHttpInfo(likedchatID, authorization) {
      let postBody = null;
      // verify the required parameter 'likedchatID' is set
      if (likedchatID === undefined || likedchatID === null) {
        throw new Error("Missing the required parameter 'likedchatID' when calling likeChat");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling likeChat");
      }

      let pathParams = {
      };
      let queryParams = {
        'likedchatID': likedchatID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = StringResponse;
      return this.apiClient.callApi(
        '/ChatReactions/LikeChat', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} likedchatID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StringResponse}
     */
    likeChat(likedchatID, authorization) {
      return this.likeChatWithHttpInfo(likedchatID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
