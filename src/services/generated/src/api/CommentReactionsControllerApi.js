/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Person from '../model/Person';
import StringResponse from '../model/StringResponse';

/**
* CommentReactionsController service.
* @module api/CommentReactionsControllerApi
* @version v0
*/
export default class CommentReactionsControllerApi {

    /**
    * Constructs a new CommentReactionsControllerApi. 
    * @alias module:api/CommentReactionsControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {Number} cancelcommmentsDislikeID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StringResponse} and HTTP response
     */
    cancelDislikeCommentWithHttpInfo(cancelcommmentsDislikeID, authorization) {
      let postBody = null;
      // verify the required parameter 'cancelcommmentsDislikeID' is set
      if (cancelcommmentsDislikeID === undefined || cancelcommmentsDislikeID === null) {
        throw new Error("Missing the required parameter 'cancelcommmentsDislikeID' when calling cancelDislikeComment");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cancelDislikeComment");
      }

      let pathParams = {
      };
      let queryParams = {
        'cancelcommmentsDislikeID': cancelcommmentsDislikeID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = StringResponse;
      return this.apiClient.callApi(
        '/CommentReactions/cancelDislikeComment', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} cancelcommmentsDislikeID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StringResponse}
     */
    cancelDislikeComment(cancelcommmentsDislikeID, authorization) {
      return this.cancelDislikeCommentWithHttpInfo(cancelcommmentsDislikeID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} cancelcommmentsLikeID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StringResponse} and HTTP response
     */
    cancelLikeCommentWithHttpInfo(cancelcommmentsLikeID, authorization) {
      let postBody = null;
      // verify the required parameter 'cancelcommmentsLikeID' is set
      if (cancelcommmentsLikeID === undefined || cancelcommmentsLikeID === null) {
        throw new Error("Missing the required parameter 'cancelcommmentsLikeID' when calling cancelLikeComment");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cancelLikeComment");
      }

      let pathParams = {
      };
      let queryParams = {
        'cancelcommmentsLikeID': cancelcommmentsLikeID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = StringResponse;
      return this.apiClient.callApi(
        '/CommentReactions/cancelLikeComment', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} cancelcommmentsLikeID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StringResponse}
     */
    cancelLikeComment(cancelcommmentsLikeID, authorization) {
      return this.cancelLikeCommentWithHttpInfo(cancelcommmentsLikeID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} dislikedeCommentID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StringResponse} and HTTP response
     */
    dislikeCommentWithHttpInfo(dislikedeCommentID, authorization) {
      let postBody = null;
      // verify the required parameter 'dislikedeCommentID' is set
      if (dislikedeCommentID === undefined || dislikedeCommentID === null) {
        throw new Error("Missing the required parameter 'dislikedeCommentID' when calling dislikeComment");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling dislikeComment");
      }

      let pathParams = {
      };
      let queryParams = {
        'dislikedeCommentID': dislikedeCommentID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = StringResponse;
      return this.apiClient.callApi(
        '/CommentReactions/DislikedComment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} dislikedeCommentID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StringResponse}
     */
    dislikeComment(dislikedeCommentID, authorization) {
      return this.dislikeCommentWithHttpInfo(dislikedeCommentID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} commentID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Person>} and HTTP response
     */
    getDislikedCommentPeopeWithHttpInfo(commentID, authorization) {
      let postBody = null;
      // verify the required parameter 'commentID' is set
      if (commentID === undefined || commentID === null) {
        throw new Error("Missing the required parameter 'commentID' when calling getDislikedCommentPeope");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getDislikedCommentPeope");
      }

      let pathParams = {
      };
      let queryParams = {
        'commentID': commentID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Person];
      return this.apiClient.callApi(
        '/CommentReactions/dislikedPeople', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} commentID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Person>}
     */
    getDislikedCommentPeope(commentID, authorization) {
      return this.getDislikedCommentPeopeWithHttpInfo(commentID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} commentID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Person>} and HTTP response
     */
    getLikedCommentPeopeWithHttpInfo(commentID, authorization) {
      let postBody = null;
      // verify the required parameter 'commentID' is set
      if (commentID === undefined || commentID === null) {
        throw new Error("Missing the required parameter 'commentID' when calling getLikedCommentPeope");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getLikedCommentPeope");
      }

      let pathParams = {
      };
      let queryParams = {
        'commentID': commentID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Person];
      return this.apiClient.callApi(
        '/CommentReactions/likedPeople', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} commentID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Person>}
     */
    getLikedCommentPeope(commentID, authorization) {
      return this.getLikedCommentPeopeWithHttpInfo(commentID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} likedCommentID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StringResponse} and HTTP response
     */
    likeCommentWithHttpInfo(likedCommentID, authorization) {
      let postBody = null;
      // verify the required parameter 'likedCommentID' is set
      if (likedCommentID === undefined || likedCommentID === null) {
        throw new Error("Missing the required parameter 'likedCommentID' when calling likeComment");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling likeComment");
      }

      let pathParams = {
      };
      let queryParams = {
        'likedCommentID': likedCommentID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = StringResponse;
      return this.apiClient.callApi(
        '/CommentReactions/LikeComment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} likedCommentID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StringResponse}
     */
    likeComment(likedCommentID, authorization) {
      return this.likeCommentWithHttpInfo(likedCommentID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
