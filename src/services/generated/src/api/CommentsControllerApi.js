/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Comments from '../model/Comments';
import StringResponse from '../model/StringResponse';

/**
* CommentsController service.
* @module api/CommentsControllerApi
* @version v0
*/
export default class CommentsControllerApi {

    /**
    * Constructs a new CommentsControllerApi. 
    * @alias module:api/CommentsControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {String} authorization 
     * @param {module:model/Comments} comments 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StringResponse} and HTTP response
     */
    addCommentWithHttpInfo(authorization, comments) {
      let postBody = comments;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling addComment");
      }
      // verify the required parameter 'comments' is set
      if (comments === undefined || comments === null) {
        throw new Error("Missing the required parameter 'comments' when calling addComment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = StringResponse;
      return this.apiClient.callApi(
        '/comments/addComment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} authorization 
     * @param {module:model/Comments} comments 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StringResponse}
     */
    addComment(authorization, comments) {
      return this.addCommentWithHttpInfo(authorization, comments)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} commnetsID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StringResponse} and HTTP response
     */
    deleteCommentWithHttpInfo(commnetsID, authorization) {
      let postBody = null;
      // verify the required parameter 'commnetsID' is set
      if (commnetsID === undefined || commnetsID === null) {
        throw new Error("Missing the required parameter 'commnetsID' when calling deleteComment");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteComment");
      }

      let pathParams = {
      };
      let queryParams = {
        'commnetsID': commnetsID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = StringResponse;
      return this.apiClient.callApi(
        '/comments/deleteComment', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} commnetsID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StringResponse}
     */
    deleteComment(commnetsID, authorization) {
      return this.deleteCommentWithHttpInfo(commnetsID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} commentsID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comments} and HTTP response
     */
    getCommentWthIDWithHttpInfo(commentsID, authorization) {
      let postBody = null;
      // verify the required parameter 'commentsID' is set
      if (commentsID === undefined || commentsID === null) {
        throw new Error("Missing the required parameter 'commentsID' when calling getCommentWthID");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCommentWthID");
      }

      let pathParams = {
      };
      let queryParams = {
        'commentsID': commentsID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Comments;
      return this.apiClient.callApi(
        '/comments/getCommentWithID', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} commentsID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comments}
     */
    getCommentWthID(commentsID, authorization) {
      return this.getCommentWthIDWithHttpInfo(commentsID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} chatID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Comments>} and HTTP response
     */
    getCommentsWithHttpInfo(chatID, authorization) {
      let postBody = null;
      // verify the required parameter 'chatID' is set
      if (chatID === undefined || chatID === null) {
        throw new Error("Missing the required parameter 'chatID' when calling getComments");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getComments");
      }

      let pathParams = {
      };
      let queryParams = {
        'chatID': chatID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Comments];
      return this.apiClient.callApi(
        '/comments/getComment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} chatID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Comments>}
     */
    getComments(chatID, authorization) {
      return this.getCommentsWithHttpInfo(chatID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
