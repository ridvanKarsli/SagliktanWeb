/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContactInfo from '../model/ContactInfo';
import StringResponse from '../model/StringResponse';

/**
* ContactInfoController service.
* @module api/ContactInfoControllerApi
* @version v0
*/
export default class ContactInfoControllerApi {

    /**
    * Constructs a new ContactInfoControllerApi. 
    * @alias module:api/ContactInfoControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {String} authorization 
     * @param {module:model/ContactInfo} contactInfo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StringResponse} and HTTP response
     */
    addContactInfoWithHttpInfo(authorization, contactInfo) {
      let postBody = contactInfo;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling addContactInfo");
      }
      // verify the required parameter 'contactInfo' is set
      if (contactInfo === undefined || contactInfo === null) {
        throw new Error("Missing the required parameter 'contactInfo' when calling addContactInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = StringResponse;
      return this.apiClient.callApi(
        '/contactInfor/addContactInfor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} authorization 
     * @param {module:model/ContactInfo} contactInfo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StringResponse}
     */
    addContactInfo(authorization, contactInfo) {
      return this.addContactInfoWithHttpInfo(authorization, contactInfo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} contactID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StringResponse} and HTTP response
     */
    deleteContactInfoWithHttpInfo(contactID, authorization) {
      let postBody = null;
      // verify the required parameter 'contactID' is set
      if (contactID === undefined || contactID === null) {
        throw new Error("Missing the required parameter 'contactID' when calling deleteContactInfo");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteContactInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'contactID': contactID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = StringResponse;
      return this.apiClient.callApi(
        '/contactInfor/deleteContact', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} contactID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StringResponse}
     */
    deleteContactInfo(contactID, authorization) {
      return this.deleteContactInfoWithHttpInfo(contactID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} userID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContactInfo>} and HTTP response
     */
    getAllContectWithHttpInfo(userID, authorization) {
      let postBody = null;
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling getAllContect");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAllContect");
      }

      let pathParams = {
      };
      let queryParams = {
        'userID': userID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ContactInfo];
      return this.apiClient.callApi(
        '/contactInfor/getAllContact', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} userID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ContactInfo>}
     */
    getAllContect(userID, authorization) {
      return this.getAllContectWithHttpInfo(userID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} contactID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContactInfo} and HTTP response
     */
    getContectWithHttpInfo(contactID, authorization) {
      let postBody = null;
      // verify the required parameter 'contactID' is set
      if (contactID === undefined || contactID === null) {
        throw new Error("Missing the required parameter 'contactID' when calling getContect");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getContect");
      }

      let pathParams = {
      };
      let queryParams = {
        'contactID': contactID
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ContactInfo;
      return this.apiClient.callApi(
        '/contactInfor/getContact', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} contactID 
     * @param {String} authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ContactInfo}
     */
    getContect(contactID, authorization) {
      return this.getContectWithHttpInfo(contactID, authorization)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} authorization 
     * @param {module:model/ContactInfo} contactInfo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StringResponse} and HTTP response
     */
    updateContactInfoWithHttpInfo(authorization, contactInfo) {
      let postBody = contactInfo;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateContactInfo");
      }
      // verify the required parameter 'contactInfo' is set
      if (contactInfo === undefined || contactInfo === null) {
        throw new Error("Missing the required parameter 'contactInfo' when calling updateContactInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = StringResponse;
      return this.apiClient.callApi(
        '/contactInfor/updateContactInfor', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} authorization 
     * @param {module:model/ContactInfo} contactInfo 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StringResponse}
     */
    updateContactInfo(authorization, contactInfo) {
      return this.updateContactInfoWithHttpInfo(authorization, contactInfo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
