/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Announcement from './Announcement';
import ContactInfo from './ContactInfo';
import Specialization from './Specialization';

/**
 * The Doctor model module.
 * @module model/Doctor
 * @version v0
 */
class Doctor {
    /**
     * Constructs a new <code>Doctor</code>.
     * @alias module:model/Doctor
     */
    constructor() { 
        
        Doctor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Doctor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Doctor} obj Optional instance to populate.
     * @return {module:model/Doctor} The populated <code>Doctor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Doctor();

            if (data.hasOwnProperty('userID')) {
                obj['userID'] = ApiClient.convertToType(data['userID'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('surname')) {
                obj['surname'] = ApiClient.convertToType(data['surname'], 'String');
            }
            if (data.hasOwnProperty('dateOfBirth')) {
                obj['dateOfBirth'] = ApiClient.convertToType(data['dateOfBirth'], 'Date');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('specialization')) {
                obj['specialization'] = ApiClient.convertToType(data['specialization'], [Specialization]);
            }
            if (data.hasOwnProperty('worksAddress')) {
                obj['worksAddress'] = ApiClient.convertToType(data['worksAddress'], [Address]);
            }
            if (data.hasOwnProperty('contactInfor')) {
                obj['contactInfor'] = ApiClient.convertToType(data['contactInfor'], [ContactInfo]);
            }
            if (data.hasOwnProperty('announcement')) {
                obj['announcement'] = ApiClient.convertToType(data['announcement'], [Announcement]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Doctor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Doctor</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['surname'] && !(typeof data['surname'] === 'string' || data['surname'] instanceof String)) {
            throw new Error("Expected the field `surname` to be a primitive type in the JSON string but got " + data['surname']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        if (data['specialization']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['specialization'])) {
                throw new Error("Expected the field `specialization` to be an array in the JSON data but got " + data['specialization']);
            }
            // validate the optional field `specialization` (array)
            for (const item of data['specialization']) {
                Specialization.validateJSON(item);
            };
        }
        if (data['worksAddress']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['worksAddress'])) {
                throw new Error("Expected the field `worksAddress` to be an array in the JSON data but got " + data['worksAddress']);
            }
            // validate the optional field `worksAddress` (array)
            for (const item of data['worksAddress']) {
                Address.validateJSON(item);
            };
        }
        if (data['contactInfor']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contactInfor'])) {
                throw new Error("Expected the field `contactInfor` to be an array in the JSON data but got " + data['contactInfor']);
            }
            // validate the optional field `contactInfor` (array)
            for (const item of data['contactInfor']) {
                ContactInfo.validateJSON(item);
            };
        }
        if (data['announcement']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['announcement'])) {
                throw new Error("Expected the field `announcement` to be an array in the JSON data but got " + data['announcement']);
            }
            // validate the optional field `announcement` (array)
            for (const item of data['announcement']) {
                Announcement.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Number} userID
 */
Doctor.prototype['userID'] = undefined;

/**
 * @member {String} name
 */
Doctor.prototype['name'] = undefined;

/**
 * @member {String} surname
 */
Doctor.prototype['surname'] = undefined;

/**
 * @member {Date} dateOfBirth
 */
Doctor.prototype['dateOfBirth'] = undefined;

/**
 * @member {String} role
 */
Doctor.prototype['role'] = undefined;

/**
 * @member {String} email
 */
Doctor.prototype['email'] = undefined;

/**
 * @member {String} password
 */
Doctor.prototype['password'] = undefined;

/**
 * @member {Array.<module:model/Specialization>} specialization
 */
Doctor.prototype['specialization'] = undefined;

/**
 * @member {Array.<module:model/Address>} worksAddress
 */
Doctor.prototype['worksAddress'] = undefined;

/**
 * @member {Array.<module:model/ContactInfo>} contactInfor
 */
Doctor.prototype['contactInfor'] = undefined;

/**
 * @member {Array.<module:model/Announcement>} announcement
 */
Doctor.prototype['announcement'] = undefined;






export default Doctor;

