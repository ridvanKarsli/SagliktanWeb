/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Comments from './Comments';
import ReactionPerson from './ReactionPerson';

/**
 * The Chats model module.
 * @module model/Chats
 * @version v0
 */
class Chats {
    /**
     * Constructs a new <code>Chats</code>.
     * @alias module:model/Chats
     */
    constructor() { 
        
        Chats.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Chats</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Chats} obj Optional instance to populate.
     * @return {module:model/Chats} The populated <code>Chats</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Chats();

            if (data.hasOwnProperty('chatID')) {
                obj['chatID'] = ApiClient.convertToType(data['chatID'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('likedUser')) {
                obj['likedUser'] = ApiClient.convertToType(data['likedUser'], [ReactionPerson]);
            }
            if (data.hasOwnProperty('dislikedUser')) {
                obj['dislikedUser'] = ApiClient.convertToType(data['dislikedUser'], [ReactionPerson]);
            }
            if (data.hasOwnProperty('uploadDate')) {
                obj['uploadDate'] = ApiClient.convertToType(data['uploadDate'], 'Date');
            }
            if (data.hasOwnProperty('userID')) {
                obj['userID'] = ApiClient.convertToType(data['userID'], 'Number');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], [Comments]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Chats</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Chats</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        if (data['likedUser']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['likedUser'])) {
                throw new Error("Expected the field `likedUser` to be an array in the JSON data but got " + data['likedUser']);
            }
            // validate the optional field `likedUser` (array)
            for (const item of data['likedUser']) {
                ReactionPerson.validateJSON(item);
            };
        }
        if (data['dislikedUser']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dislikedUser'])) {
                throw new Error("Expected the field `dislikedUser` to be an array in the JSON data but got " + data['dislikedUser']);
            }
            // validate the optional field `dislikedUser` (array)
            for (const item of data['dislikedUser']) {
                ReactionPerson.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        if (data['comments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['comments'])) {
                throw new Error("Expected the field `comments` to be an array in the JSON data but got " + data['comments']);
            }
            // validate the optional field `comments` (array)
            for (const item of data['comments']) {
                Comments.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Number} chatID
 */
Chats.prototype['chatID'] = undefined;

/**
 * @member {String} message
 */
Chats.prototype['message'] = undefined;

/**
 * @member {Array.<module:model/ReactionPerson>} likedUser
 */
Chats.prototype['likedUser'] = undefined;

/**
 * @member {Array.<module:model/ReactionPerson>} dislikedUser
 */
Chats.prototype['dislikedUser'] = undefined;

/**
 * @member {Date} uploadDate
 */
Chats.prototype['uploadDate'] = undefined;

/**
 * @member {Number} userID
 */
Chats.prototype['userID'] = undefined;

/**
 * @member {String} category
 */
Chats.prototype['category'] = undefined;

/**
 * @member {Array.<module:model/Comments>} comments
 */
Chats.prototype['comments'] = undefined;






export default Chats;

